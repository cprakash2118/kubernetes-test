Setting up a Kubernetes 3-node cluster (1 master, 2 workers) on CentOS using the default container runtime (containerd) involves several steps.

Pre-requisites
-Three CentOS 9 nodes:
1 Master node
2 Worker nodes
-Root or sudo access on all nodes.
-Network connectivity between all nodes.

###
Step 1: Prepare the Nodes
-Update and install necessary packages on all nodes
# yum update -y
# yum install -y vim git curl wget

- Disable SELinux on all nodes
# setenforce 0
# sed -i --follow-symlinks 's/^SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config

- Disable swap on all nodes
# swapoff -a
# sed -i '/swap/d' /etc/fstab

- Enable kernel modules and configure sysctl on all nodes
#vim  /etc/modules-load.d/k8s.conf
overlay
br_netfilter

# modprobe overlay
# modprobe br_netfilter


#vim /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1

sudo sysctl --system


# modprobe overlay
# modprobe br_netfilter

#vim /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv

# sysctl --system

###
Step 2: Install containerd on all nodes.
- Install and configure containerd
# dnf install -y containerd
# vim /etc/containerd/config.toml
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true
	
# vim /etc/crictl.yaml
runtime-endpoint: unix:///run/containerd/containerd.sock

# systemctl restart containerd
# systemctl enable containerd


###
Step 3: Install Kubernetes components on all nodes
x- Add Kubernetes repository

#vim /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
       https://packages.cloud.google.com/yum/doc/yum-key.gpg

- Install kubelet, kubeadm, and kubectl.
# dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes


#vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

#####
[Service]
Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock"
###

# systemctl enable kubelet
# systemctl start kubelet


###
Step 4: Initialize the Kubernetes Master Node

- On the master node, initialize the cluster
#kubeadm init --pod-network-cidr=10.244.0.0/16
or 
#kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=IP-Address



Set up kubeconfig for the regular user
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

###
Step 5: Install a Pod Network Add-on
Install Flannel network add-on
# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

###
Step 6: Join Worker Nodes to the Cluster
On the master node, get the join command
kubeadm token create --print-join-command

Note:- Run the join command on each worker node (Replace the command with the one obtained from the previous step).


###
Step 7: Verify the Cluster
On the master node, check the status of the nodes

# kubectl get nodes
